/**
 * Mule Jira Cloud Connector
 *
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */

/**
 * This file was automatically generated by the Mule Cloud Connector Development Kit
 */

package org.mule.module.jira;

import org.mule.api.lifecycle.Initialisable;
import org.mule.api.lifecycle.InitialisationException;
import org.mule.module.jira.api.AxisJiraClient;
import org.mule.module.jira.api.DefaultAxisPortProvider;
import org.mule.module.jira.api.JiraClient;
import org.mule.tools.cloudconnect.annotations.Connector;
import org.mule.tools.cloudconnect.annotations.Operation;
import org.mule.tools.cloudconnect.annotations.Parameter;
import org.mule.tools.cloudconnect.annotations.Property;

import com.atlassian.jira.rpc.soap.beans.RemoteIssue;

import java.rmi.RemoteException;

/**
 * JIRA Connector Facade
 * @author flbulgarelli
 */
@Connector(namespacePrefix = "jira")
public class JiraCloudConnector implements Initialisable
{
    public static final String DEFAULT_ADDRESS = "https://jira.atlassian.com/rpc/soap/jirasoapservice-v2";
    
    @Property(optional = true, name = "client-ref")
    private JiraClient<JiraException> client;
    @Property
    private String username;
    @Property
    private String password;
    @Property(optional = true, defaultValue = DEFAULT_ADDRESS)
    private String address;

    /**
     * Creates an issue. 
     * 
     * {@code  <jira:create-issue issue="#[map-payload:anIssue]" />} 
     * @param issue the issue to create in Jira
     * @return the new issue's key 
     */
    @Operation
    public String createIssue(@Parameter RemoteIssue issue)
    {
        return client.createssue(issue);
    }
    
    /**
     * Answers an existent issue by key.
     * 
     * {@code <jira:get-issue key="#[header:key]" />} 
     * @param key the key of the issue
     * @return a non null issue. If it not exists, a JiraException will be thrown
     */
    @Operation
    public RemoteIssue getIssue(String key)
    {
        return client.getIssue(key);
    }
    
    /**
     * Deletes an issue by key. TODO if not exists?
     * 
     * {@code <jira:delete-issue key="aKey" />}
     * 
     * @param key the key of the issue
     */
    @Operation
    public void deleteIssue(String key)
    {
        client.deleteIssue(key);
    }

    public void initialise() throws InitialisationException
    {
        if (client == null)
        {
            setClient(new AxisJiraClient(new DefaultAxisPortProvider(username, password, address)));
        }
    }

    public JiraClient<JiraException> getClient()
    {
        return client;
    }

    public void setClient(JiraClient<RemoteException> client)
    {
        this.client = JiraClientAdaptor.adapt(client);
    }

    public String getUsername()
    {
        return username;
    }

    public void setUsername(String username)
    {
        this.username = username;
    }

    public String getPassword()
    {
        return password;
    }

    public void setPassword(String password)
    {
        this.password = password;
    }

    public String getAddress()
    {
        return address;
    }

    public void setAddress(String address)
    {
        this.address = address;
    }

}
