/**
 * Mule Jira Cloud Connector
 *
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */

/**
 * This file was automatically generated by the Mule Cloud Connector Development Kit
 */

package org.mule.module.jira.config;

import com.atlassian.jira.rpc.soap.beans.RemoteField;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mule.api.processor.MessageProcessor;
import org.mule.module.jira.JiraClientFactory;
import org.mule.module.jira.api.JiraClient;
import org.mule.tck.FunctionalTestCase;

import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

public class JiraNamespaceHandlerCustomFieldNamesTestCase extends FunctionalTestCase {

    private static final String TOKEN = "aToken";
    private static final String ISSUE_KEY = "someIssueKey";
    @Mock
    private JiraClient mockJiraClient;

    @Override
    protected void doSetUp() throws Exception {
        MockitoAnnotations.initMocks(this);
        Mockito.when(mockJiraClient.login("user", "user")).thenReturn(TOKEN);
        JiraClientFactory.setDefaultClient(mockJiraClient);
    }

    @Override
    protected String getConfigResources() {
        return "jira-namespace-config-custom-fields-names.xml";
    }

    public void testUpdateCustomFieldByExternalName() throws Exception {
        RemoteField[] remoteFields = new RemoteField[1];
        remoteFields[0] = new RemoteField("someCustomFieldId", "someCustomFieldName");
        Mockito.when(mockJiraClient.getCustomFields(TOKEN)).thenReturn(remoteFields);

        LinkedHashMap<String, List<String>> fields = new LinkedHashMap<String, List<String>>(2);
        fields.put("someCustomFieldId", Arrays.asList("value1", "value2"));

        lookupFlowConstruct("testUpdateCustomFieldByExternalName").process(getTestEvent(""));
        Mockito.verify(mockJiraClient).updateIssue(TOKEN, ISSUE_KEY, fields);
    }

    private MessageProcessor lookupFlowConstruct(String name) {
        return (MessageProcessor) muleContext.getRegistry().lookupFlowConstruct(name);
    }
}