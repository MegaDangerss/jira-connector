/**
 * Mule Jira Cloud Connector
 *
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */

/**
 * This file was automatically generated by the Mule Cloud Connector Development Kit
 */

package org.mule.module.jira;

import com.atlassian.jira.rpc.soap.jirasoapservice_v2.JiraSoapService;
import org.junit.Before;
import org.junit.Test;
import org.mule.module.jira.api.AxisJiraClient;
import org.mule.module.jira.api.AxisJiraSoapServiceProvider;
import org.mule.module.jira.api.JiraClient;

import java.rmi.RemoteException;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class JiraTestCase {

    private JiraClient client;
    private AxisJiraSoapServiceProvider provider;
    private JiraSoapService service;

    @Before
    public void setup() throws RemoteException {
        service = mock(JiraSoapService.class);
        provider = mock(AxisJiraSoapServiceProvider.class);
        when(provider.getService()).thenReturn(service);
        client = new AxisJiraClient(provider);
    }


    @Test
    public void getIssueExists() throws Exception {
//        RemoteIssue issue = new RemoteIssue();
//        String key = "156";
//        when(service.getIssue(anyString(), eq(key))).thenReturn(issue);
//        assertSame(issue, client.getIssue(key));
    }

//    @Test(expected = RemoteException.class)
//    public void getIssueNotExists() throws Exception
//    {
//        String key = "156";
//        when(service.getIssue(anyString(), eq(key))).thenThrow(new RemoteException());
//        client.getIssue(key);
//    }
//
//    @Test
//    public void removeIssue() throws Exception
//    {
//        String key = "156";
//        client.deleteIssue(key);
//        verify(service).deleteIssue(anyString(), eq(key));
//    }
//
//
//    @Test
//    public void createIssue() throws Exception
//    {
//        RemoteIssue issue = new RemoteIssue();
//        when(service.createIssue(anyString(), eq(issue))).thenReturn(new RemoteIssue()
//        {
//            {
//                setKey("100");
//            }
//        });
//        assertEquals("100", client.createssue(issue));
//    }


}
